## Отчет по лабораторной работе № 3

#### № группы: `ПМ-2402`

#### Выполнил: `Грашин Илья Романович`

#### Вариант: `7`

### Cодержание:

- [Постановка задачи](#1-постановка-задачи)
- [Описание классов и их полей](#2-описание-классов-и-их-полей)
- [Документация](#3-документация)

### 1. Постановка задачи

>Разработать программу для работы с «букварем», представляющим буквы алфавита и
 их количество. Реализовать функционал для добавления букв, подсчёта их количества,
 проверки возможности составления слов и выполнения операций с буквами
>
- ###  Создание объекта с именем и количеством бук   
Создание объекта, который хранит имя пользователя и массив букв с их коли
чеством. Вывод данных может быть в одном из форматов: 1. «aaaaa c kkk» (без
 пробелов между буквами); 2. «a-5; c-1; k-3» (в формате количества). Реализована
 возможность выбора формата вывода.
- ### Добавление буквы  
Увеличение количества определённой буквы в массиве.
- ### Подсчёт количества определённой буквы    
Возвращает количество указанной буквы в массиве.
- ### Подсчёт общего количества букв   
 Вычисляет общее количество всех букв в массиве.
- ### Сборка слова из букв      
Позволяет собрать слово, удаляя использованные буквы из массива. Выводит со
ставленное слово, используя доступные буквы. Пример: при наличии букв «с»,
 «л», «н» и попытке составить слово «слон», результатом будет «слн».
- ###  Проверка возможности составления слова  
 Определяет, возможно ли составить заданное слово из доступных букв, не изменяя
 массив.
- ### Сборка слова без изменения массива  
 Выводит результат сборки слова, используя доступные буквы, но не удаляет их
 из массива.
- ### Прочитать слово, если возможно 
Удаляет буквы из массива и возвращает результат только в случае, если слово
 можно полностью составить.
- ### Вычисление среднего количества страниц в книгах указанного автора   
Нахождение автора, написавшего больше всего книг или страниц, в зависимости
от запроса.
- ### Подсчёт количества возможных слов   
Вычисляет, сколько раз можно составить указанное слово из доступных букв.
- ### Добавление буквы и контроль изменений   
Чёткое указание, какие функции изменяют массив (например, удаляют буквы), а
 какие работают с копиями данных, не влияя на исходный массив.

### 2. Описание классов и их полей

Для реализации функционала создан 1 класс 'Bukvar'

1. Класс `Bukvar`  
Это класс, содержащий в себе имя пользователя, счетчик, количество букв  и сами буквы.

`userName` - это поле типа `String`, которое хранит имя пользователя.

`letters` - это поле формата `char[]`, которое хранит буквы.

`counts` - это поле формата `int[]`, которое хранит счетчики букв.

`size` - это поле формата `int`, которое хранит общее количество букв( и длину массива букв)


### 3. Документация 

### 1. Конструкторы классов (создание объектов на основе вышеописанных классов) ###  
- Bukvar(String userName) - создание букваря с указанием имени.   
Создается пустой массив букв длиною в 10
Создается пустой массив счетчиков букв, длиною тоже 10
Создается переменная с изначальным значением 0 для общего подсчета букв
### 2. Методы классов (разные операции) ###  
- getUserName() - возвращает строку с именем.
- getLetters() - возвращает буквы.
- getCount(char letter) - возвращает количество введенной буквы `letter`.
- getTotalCount() - возвращает количество всех букв.
- resizeArrays() - увеличивает размеры массивов
- findLetter(char letter) - находит индекс нужной буквы `letter` в массиве (или же возвращает ключевое значениее -1, которое обозначает, что буквы нет).
- addLetter(char letter, int count) - изменяет массив, добавляя букву `letter` `count` раз.
- toString(int format) - обозначает каким форматом нужно вывести массив.
- format1() - вывод букв в виде aaa c kkkkk.
- format2() - вывод букв в виде a-3; c-1; k-5;
- buildWord(String word) - возвращает слово, которое состоит из имеющихся букв. Пример: при наличии букв «с», «л», «н» и попытке составить слово «слон», результатом будет «слн».
- canBuildWord(String word) - проверяет можно ли полностью составить слово из введенных букв.
- findLetterInCopy(char letter, char[] letters, int size) - проверят есть ли буква в изначальном букваре для написания слова.
- buildWordWithoutChanges(String word) - проверят предыдущим способом нужные буквы, и если есть, то создает слово и возвращает его.
- readWord(String word) - выводит слово, если есть нужные буквы, и удаляет его. (не понимаю зачем оно надо)
- countPossibleWords(String word) - считает сколько раз можно составить слово `word` из имеющихся букв.
### 2. Характеристика методов
 Изменяющие методы:
- resizeArrays(): Увеличивает размер массивов letters и counts, создавая новые массивы.
- addLetter(char letter, int count): Добавляет новую букву или увеличивает счетчик существующей, изменяя letters, counts, и size.
- buildWord(String word): Уменьшает количество доступных букв в массиве counts.
- readWord(String word): Вызывает buildWord, если слово можно составить, тем самым изменяя массив counts.
- Методы, не изменяющие массивы:
- getTotalCount(): Просто подсчитывает общее количество букв, не меняя массивы.
- toString(int format) и format1(), format2(): Возвращает строковое представление, не изменяя массивы.
- getLetters(): Возвращает представление текущего состояния, не изменяя массивы.
- getCount(char letter): Возвращает количество указанной буквы, не меняя массивы.
- buildWordWithoutChanges(String word): Создает копию массивов и работает с ней.
- canBuildWord(String word) Создает копию массивов и работает с ней.
- countPossibleWords(String word): Создает копию массивов и работает с ней.

  
